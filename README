Pleajure.clj
By Anand Patil
February 20, 2009
Common Public License


 ===========
 = Purpose =
 ===========

Pleajure lets you write Clojure S-expressions using whitespace in place of parentheses. The resulting look-and-feel is a bit like Python.


 =================
 = Usage example =
 =================

(load-file "pleajure.clj")

Translate and display:
(join-lines (plj-to-clj fname))

Translate and load (like load-file):
(with-pleajure "test.plj")


 =====================
 = Translation rules =
 =====================

1) Lines are listed S-expressions. That means

    a .....
    b .....

translates to 

    (a .....) (b .....)


2) Indented blocks are nested S-expressions. That means

    a ......
        b ......
            c ......
        d ......
        e ......

translates to 

    (a ...... (b ...... (c ......)) (d ......) (e ......))


3) Commas mean the next line is part of the current line. That means

    a ......
        b ......,
            ######
            c ......,
                ******
        d ......
        e ......

translates to

    (a ...... (b ......, ###### (c ......, ******)) (d ......) (e ......))


4) Lines that are part of strings and comments are left alone.


 ===================
 = Syntax examples =
 ===================

***********************************************************************

defn id? [x] 
    "Checks whether x is an id: ref, value or agent"
    or
        instance? clojure.lang.IRef x
        instance? clojure.lang.Agent x
        instance? clojure.proxy.java.util.concurrent.atomic.AtomicReference$IRef x
        
--------- translates to --------------

(defn id? [x]
    "Checks whether x is an id: ref, value or agent"
    (or
        (instance? clojure.lang.IRef x)
        (instance? clojure.lang.Agent x)
        (instance? clojure.proxy.java.util.concurrent.atomic.AtomicReference$IRef x)))
        
***********************************************************************

***********************************************************************

defn report-to-child [val parent agent-parents parents update-fn agent-parent-vals]
    "Called by parent-watcher when a parent either updates or reverts to
    the 'need-update' state. If a parent updates and the child cell wants
    to update, computation is performed if possible. If a parent reverts
    to the need-to-update state, the child is put into the need-to-update 
    state also."
    do (dosync (commute agent-parent-vals swap-agent-parent-value parent))
        if (:updating val) 
            if (= (count @agent-parent-vals) (count agent-parents)) ,
                (compute parents agent-parent-vals update-fn) ,
                val
            if (:needs-update val) ,
                val ,
                {:needs-update true}

--------- translates to --------------

(defn report-to-child [val parent agent-parents parents update-fn agent-parent-vals]
    "Called by parent-watcher when a parent either updates or reverts to
    the 'need-update' state. If a parent updates and the child cell wants
    to update, computation is performed if possible. If a parent reverts
    to the need-to-update state, the child is put into the need-to-update
    state also."
    (do (dosync (commute agent-parent-vals swap-agent-parent-value parent))
        (if (:updating val)
            (if (= (count @agent-parent-vals) (count agent-parents)) ,
                (compute parents agent-parent-vals update-fn) ,
                val)
            (if (:needs-update val) ,
                val ,
                {:needs-update true}))))

***********************************************************************


 ========
 = Note =
 ========

Pleajure is alpha. Expect some errors. If you want it to work better, fork it!